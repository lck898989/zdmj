// pages/lck/cart/cart.js
import Cart from '../../../utils/Cart.js';
//请求类
import Request from '../../../utils/Request.js'
import regeneratorRuntime from '../../../utils/regenerator-runtime/runtime-module.js'
let app = getApp();
Page({

  /**
   * 页面的初始数据
   */
  data: {
      host : app.host,
      //是否为店铺选中状态
      isChoosed : false,
      //是否为商品选中状态
      isGoodsChoosed : false,
      choosedColor : '#bbb',
      choosedGoodsColor: '#bbb',
      //店铺名称
      storeName : '',
      storeArr : [],
      goodsCount : 0,
      showBuyCon : false,
      //商店列表
      storeList : [],
      //产品列表
      products : [],
      //编辑的产品
      product : {},
      /*产品规格对象
        {
            "规格":"1|2",
            "尺寸":"1|L|XL|XXL",
            "颜色":"1|red|blue"
        }
      */
      product_size : {},
      /*产品规格
        
      */
      productSize : [],
      //购物车对象
      carts : {},
      //是不是处于编辑状态
      isEditor : false,
      count : 3,
      //是否为全选
      isFullChoosed : false,
      fullChoosedColor : '#bbb',
      selectColor: '#ede2f4',
      selectFontColor: '#863bb7',
      unSelectColor: '#eee',
      unSelectFontColor: '#000',
      selectBorder : '2rpx solid #863bb7',
      unselectBorder : '2rpx solid #eee',
      
  },
  //选择商品的型号
  chooseType : function(event){
     console.log("event is ",event);
     let eventId = event.currentTarget.id;
     console.log("eventId is ",eventId);
     let eventArr = eventId.split('-');
     console.log("eventArr is ",eventArr);
     let typeItem = eventArr[0];
     let index = eventArr[1];
     let type = eventArr[2];
     console.log("productSize is ",this.data.productSize);
     let productSizeL = this.data.productSize.length;
     for(let i = 0;i < productSizeL;i++){
        let productSizeItem = this.data.productSize[i];
        for(let j = 0;j < productSizeItem.data.length;j++){
            if(productSizeItem.text === type && productSizeItem.data[j].msg === typeItem){
                console.log("text is ",productSizeItem.text,"msg is ",productSizeItem.data[j].msg);
                productSizeItem.data[j].active = !productSizeItem.data[j].active;
            }
        }
        // if(productSizeItem.text === type && productSizeItem.data.)
     }
     this.setData({
        productSize : this.data.productSize
     })
     
  },
  chooseStore:function(){
      console.log("isChoosed is ",this.data.isChoosed);
      this.setData({
          isChoosed : !this.data.isChoosed,
          choosedColor : this.data.isChoosed ? '#ec0023' : '#bbb',
          isGoodsChoosed : !this.data.isGoodsChoosed,
          choosedGoodsColor : this.data.isGoodsChoosed ? '#ec0023' : '#bbb'
      })
  },
  //选择商品
  chooseGoods : function(){
      console.log("this.data.isGoodsChoosed is ",this.data.isGoodsChoosed);
      if(!this.data.isGoodsChoosed){
          //将全选状态改为false
          this.chooseStore();
      }else{
        this.setData({
            isGoodsChoosed : !this.data.isGoodsChoosed,
            choosedGoodsColor : this.data.isGoodsChoosed ? '#ec0023' : '#bbb'
        })

      }
  },
  //删除购物车中的该商品
  delete: function (event) {
    let dataSet = event.currentTarget.dataset;
    let pid = dataSet.pid;
    let storeName = dataSet.storeName;
    //将商家名称和商品id给服务器让服务器去删除该商品
    let req = new Request();
    console.log("删除该商品");
  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: async function (options) {
    Array.prototype.contain = function(item){
        let len = this.length;
        for(let i = 0;i < len;i++){
            //pid和sid相同
            if(this[i].pid === item.pid && this[i].sid === item.sid){
                return true;
            }
        }
        return false;
    }
      //刷新绑定数据的html页面
      this.setData({
          storeArr : this.data.storeArr,
          goodsCount : this.data.goodsCount
      })
      console.log("商品数量是：",this.data.goodsCount);
      //请求购物车里面的商品
      let url = app.host + 'Data/CartList';
      console.log("url is ",url);
      let reqCartListData = {
          uid : 1,
          page : 1
      }
      let req = new Request(url,reqCartListData,'POST','text');
      let res = await req.sendRequest();
      console.log("res is ",res.data.carts);
      for(let m in res.data.carts){
          console.log("m is ",m);
          //将该键值对应的商店的商品的size属性设置为对象
          console.log(res.data.carts[m]);
          let storeProductLen = res.data.carts[m].length;
          //商铺状态是未选中状态
          res.data.carts.choosed = false;
          for(let j = 0;j < storeProductLen;j++){
              let itemTemp = res.data.carts[m][j];
              itemTemp.size = JSON.parse(itemTemp.size);
              let sizeValues = Object.values(itemTemp.size).join(';');
              itemTemp.size = sizeValues;
              console.log("sizeValues is ",sizeValues);
              //将
            //   for(let k = 0;k<sizeKeys.length;k++){
            //       itemTemp[`${sizeKeys[k]}`] = itemTemp.size[`${sizeKeys[k]}`];
            //   }
              itemTemp.product.size = JSON.parse(itemTemp.product.size);
              //商品未选中状态
              itemTemp.choosed = false;
              console.log("carts[m][j] is ",res.data.carts[m][j]);

          }
          console.log("carts[m]'s size is ",res.data.carts[m]);
          //将商家的键值保存起来
          this.data.storeList.push(m);
      }
      this.setData({
          storeList : this.data.storeList,
          carts     : res.data.carts,
      })
      //将所有产品根据键值取出来
      let storeLen = this.data.storeList.length;
      for(let k = 0;k < storeLen;k++){
          let key = this.data.storeList[k];
          let value = res.data.carts[key];
          console.log("value is ",value);
          let valueLen = value.length;
          for(let j = 0;j < valueLen;j++){
              let productItem = value[j].product;
              console.log("productItem is ",productItem);
              this.data.products.push(productItem);
          }
      }
      console.log("products is ",this.data.products);
  },
  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  },
  test : function(event){
      //阻止滑动事件的响应
      console.log("阻止滑动事件的响应");
  },
  //进入购物车里面的商品详情
  enterDetail: function (event) {
    console.log("adasdf", event);
    wx.navigateTo({
        url: '../cartGoodsDetail/cartGoodsDetail',
    })
  },
  endEvent : function(event){
      console.log("in endEvent event is ",event);
  },
  //通过商品id和商户id获得产品数据
  /**
   * @param  {产品id} pid
   * @param  {商户id} sid
   * @param  {用户已经选择的类型数组} choosedArr
   */
  getProductByPidAndSid: function (pid, sid,choosedArr) {
    let productsLen = this.data.products.length;
    let product = null;
    
    console.log("获取产品前产品规格是-->productsize is ",this.data.productSize);
    for (let i = 0; i < productsLen; i++) {
        if (this.data.products[i].sid === sid && this.data.products[i].pid === pid) {
            console.log("=====>>>",this.data.products[i].sid,this.data.products[i].pid);
            console.log("<<<=====>>>",this.data.products[i]);
            //找到对应的pid和sid的商品
            product = this.data.products[i];
            //将size属性解析成json对象
            for(let key in this.data.products[i].size){
                console.log("key is ",key);
                if(key !== null){
                    let tempObj = {};
                    tempObj.text = key;
                    //该商品的所有size属性
                    let typeString = this.data.products[i].size[key];
                    let tempArr = [];
                    let typeArr = typeString.split('|');
                    let typeArrLen = typeArr.length;
                    //获得已经选择的尺寸标红其他尺寸信息不标红
                    for(let m = 0;m < typeArrLen;m++){
                        let dataJson = {};
                        dataJson.msg = typeArr[m];
                        dataJson.active = false;
                        tempArr.push(dataJson);
                    }
                    tempObj.data = tempArr;
                    console.log("tempObj.data is ",tempObj.data);
                    //是否选中
                    tempObj.choosed = false;
                    console.log("-->productsize is ",this.data.productSize);
                    this.data.productSize.push(tempObj);
                }
            }
            console.log("最终的productSize is ",this.data.productSize);
        }
    }
    this.setData({
        product_size : this.data.product_size
    })
    return product;
  },
  //编辑商品
  editorGoods : function(event){
      //重新请求该商品id对应的商品的详细信息
      console.log("编辑购物车里面的商品信息");
      console.log("event is ",event);
      console.log("products is ",this.data.products);
      let dataSet = event.currentTarget.dataset;
      let pid = Number(dataSet.pid);
      let sid = Number(dataSet.sid);
      let choosedType = dataSet.choosed;
      let choosedArr = choosedType.split(';');
      console.log("choosedType is ",choosedType);
      console.log("pid is ",pid,"sid is ",sid);
      this.data.product = this.getProductByPidAndSid(pid,sid,choosedArr);
      console.log("product is ",this.data.product);
      //将已经选中的类型着色
      //产品规格数组
      console.log("productSize is ",this.data.productSize);
      this.setData({
          showBuyCon : true,
          product : this.data.product,
          productSize : this.data.productSize
      });
      console.log("productSize-->",this.data.productSize);
  },
  //取消编辑商品界面
  cancelBox : function(){
      console.log("关闭弹出框");
      this.setData({
          showBuyCon : false,
          product : {},
          productSize : [],
          product_size : [],
      });
    
  },
   //减少商品数量
    sub: function () {
        if (this.data.count > 1) {
            this.setData({
                count: this.data.count - 1
            })
        }
    },
    add: function () {
        this.setData({
            count: this.data.count + 1
        })
    },
})